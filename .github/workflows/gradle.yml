# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write
  # 자바 버전 17로 세팅
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.CAPO_TOKEN }}
  # Spring boot 애플리케이션 빌드
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        arguments: clean bootJar
        
    # docker hub 로그인 
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}      
  # Docker 이미지 빌드 
    - name: Docker build & Push
      run: |
        docker build --build-arg FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE }} -t ${{ secrets.DOCKERHUB_USERNAME }}/back .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/back

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      id: deploy
      env:
        APP: "back"
        COMPOSE: "/home/capo_project/docker-compose.yml"
      with:
        host: ${{ secrets.EC2_HOST }} # EC2_HOST 키
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }} # PRIVATE_KEY
        port: 22
        envs: COMPOSE
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/back
          sudo docker stop back || true
          sudo docker rm back || true
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/back
          sudo docker-compose -f $COMPOSE up -d
          sudo docker image prune -f
        
