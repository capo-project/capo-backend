name: Java CI/CD pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout repository  # Step 1: 코드 저장소 체크아웃
      uses: actions/checkout@v3  # 최신 버전(v3)의 checkout 액션 사용
      
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        java-package: 'jdk'  # JDK 패키지 설치
        check-latest: false  # 최신 버전 확인 안 함
        server-id: 'github'  # GitHub 서버 ID 설정
        server-username: ${{ github.actor }}  # GitHub 액터의 사용자 이름 사용
        server-password: ${{ secrets.GITHUB_TOKEN }}  # GitHub 토큰 사용
        overwrite-settings: true  # 기존 설정 덮어쓰기
        
    - name: Cache Gradle packages  # Step 3: Gradle 패키지 캐시
      uses: actions/cache@v3  # 최신 버전(v3)의 캐싱 액션 사용
      with:
        path: ~/.gradle  # Gradle 패키지의 캐시 경로
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}  # Gradle 파일의 해시를 기반으로한 캐시 키
        restore-keys: ${{ runner.os }}-gradle  # 캐시 복원 키
        
    - name: Build with Gradle  # Step 4: Gradle로 프로젝트 빌드
      run: ./gradlew clean build  # Gradle의 clean 및 build 명령 실행

    - uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.CAPO_TOKEN }}
        
    # docker hub 로그인 
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}      
  # Docker 이미지 빌드 
    - name: Docker build & Push
      run: |
        docker build . --build-arg FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE }} -t ${{ secrets.DOCKERHUB_USERNAME }}/back:${{ github.sha }} 
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/back:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/back:latest
        
    - name: Push Docker image to Docker Hub  # Step 7: Docker 이미지를 Docker Hub에 푸시
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/back:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/back:latest
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      id: deploy
      env:
        APP: "back"
        COMPOSE: "/home/capo_project/docker-compose.yml"
      with:
        host: ${{ secrets.EC2_HOST }} # EC2_HOST 키
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }} # PRIVATE_KEY
        port: 22
        envs: COMPOSE
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/back
          sudo docker stop back || true
          sudo docker rm back || true
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/back # 도커런
          sudo docker-compose -f $COMPOSE up -d
          sudo docker image prune -f
        
