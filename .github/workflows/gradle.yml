name: Java CI/CD pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
       G_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
       G_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
       K_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
       K_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
       JWT_SECRET_KEY: ${{ secrets.JWT_KET }}
       MYSQL_USER: ${{ secrets.JWT_KET }}
       MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
       MYSQL_URL: ${{ secrets.MYSQL_URL }}
       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    steps:
    - name: Checkout repository  # Step 1: 코드 저장소 체크아웃
      uses: actions/checkout@v3  # 최신 버전(v3)의 checkout 액션 사용
      
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        java-package: 'jdk'  # JDK 패키지 설치
        check-latest: false  # 최신 버전 확인 안 함
        server-id: 'github'  # GitHub 서버 ID 설정
        server-username: ${{ github.actor }}  # GitHub 액터의 사용자 이름 사용
        server-password: ${{ secrets.GITHUB_TOKEN }}  # GitHub 토큰 사용
        overwrite-settings: true  # 기존 설정 덮어쓰기
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Build with Gradle  # Step 4: Gradle로 프로젝트 빌드
      run: ./gradlew clean build  # Gradle의 clean 및 build 명령 실행
        
    # docker hub 로그인 
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }} 
        
  # Docker 이미지 빌드 
    - name: Docker build & Push
      run: |
        docker build --build-arg  G_CLIENT_ID = "${{ env.G_CLIENT_ID }}" \
        --build-arg G_CLIENT_SECRET="${{ env.G_CLIENT_SECRET }}" \
        --build-arg K_CLIENT_ID="${{ env.K_CLIENT_ID }}" \
        --build-arg K_CLIENT_SECRET="${{ env.K_CLIENT_SECRET }}" \
        --build-arg JWT_SECRET_KEY="${{ env.JWT_SECRET_KEY }}" \
        --build-arg MYSQL_USER="${{ env.MYSQL_USER }}" \
        --build-args MYSQL_PASSWORD="${{ env.MYSQL_PASSWORD }}" \
        --build-args MYSQL_URL="${{ env.MYSQL_URL }}" \
        -t ${{ secrets.DOCKERHUB_USERNAME }}/back:${{ github.sha }} 
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/back:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/back:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/back:latest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: ap-northeast-2
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      id: deploy
      env:
        APP: "back"
        COMPOSE: "/home/capo_project/docker-compose.yml"
      with:
        host: ${{ secrets.EC2_HOST }} # EC2_HOST 키
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }} # PRIVATE_KEY
        port: 22
        envs: COMPOSE
        script: |
          sudo docker stop back || true
          sudo docker rm back || true
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/back:${{ github.sha }}
          sudo docker tag ${{ secrets.DOCKERHUB_USERNAME }}/back:${{ github.sha }} back
          sudo docker run -d -p --name back -e TZ=Asia/Seoul 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/back # 도커런
          sudo docker-compose -f $COMPOSE up -d
        
        
