plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.sonarqube" version "5.0.0.4638"
    id "jacoco"
}

// SonarQube 설정
sonar {
    properties {
        property "sonar.projectKey", "capo-project_capo-backend_b464bedf-6e35-4231-9175-5e9321895293"
        property "sonar.projectName", "capo-backend"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main"
        property "sonar.tests", "src/test"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java"
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

group = 'com.PhotoCardTradeProjectBack'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot 기본 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'            // JPA
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'           // Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-web'                 // Web
    implementation 'org.springframework.boot:spring-boot-starter-mail'                // Email
    implementation 'org.springframework.boot:spring-boot-starter-security'            // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-validation'          // Validation
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'          // Redis
    implementation 'org.springframework.boot:spring-boot-starter-actuator'            // Actuator

    // Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE' // AWS

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'                          // QueryDSL JPA
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'                     // QueryDSL Annotation Processor
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'                   // Annotation API
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'                 // Persistence API

    // Database
    implementation 'mysql:mysql-connector-java:8.0.23'                                // MySQL
    runtimeOnly 'com.h2database:h2'                                                   // H2 Database (테스트용)

    // Security 및 인증
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'                                 // JWT API
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'                                   // JWT Implementation
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'                                // JWT Jackson Serializer
    implementation 'org.springframework.security:spring-security-oauth2-client'      // OAuth2 Client
    implementation 'org.springframework.security:spring-security-oauth2-jose'        // OAuth2 JOSE (JWT)

    // 기타 유틸
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'       // Jasypt (암호화)
    implementation 'com.google.code.gson:gson:2.8.7'                                 // JSON 파싱
    implementation 'org.apache.commons:commons-lang3:3.12.0'                         // StringUtils
    implementation 'commons-io:commons-io:2.11.0'                                    // FileUtils
    implementation 'com.fasterxml.uuid:java-uuid-generator:4.3.0'                    // UUID Generator

    // 기타 필수 구성
    implementation 'org.javassist:javassist:3.15.0-GA'                               // Javassist
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'         // OpenAPI (Swagger)
    implementation 'io.micrometer:micrometer-registry-prometheus'                    // Prometheus Metrics

    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'          // WebSocket

    // SSH
    implementation 'com.github.mwiede:jsch:0.2.17'                                   // SSH

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'           // Spring Boot Test
    testImplementation 'org.mockito:mockito-core:3.9.0'                              // Mockito Core
    testImplementation 'org.mockito:mockito-inline:4.11.0'                           // Mockito Inline
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'                   // JUnit 5 API
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'                   // JUnit 5 Engine
    testImplementation 'org.assertj:assertj-core:3.24.2'                             // AssertJ
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'         // Testcontainers 지원
    testImplementation 'org.testcontainers:junit-jupiter'                            // Testcontainers JUnit
    testImplementation 'org.testcontainers:localstack:1.20.4'                        // Testcontainers LocalStack

    // Lombok
    compileOnly 'org.projectlombok:lombok'                                           // Lombok (빌드 시점)
    annotationProcessor 'org.projectlombok:lombok'                                   // Lombok Annotation Processor
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

// jacoco 정보
jacoco {
    toolVersion = "0.8.11"
    layout.buildDirectory.dir("reports/jacoco")
}

// jacoco Report 생성
jacocoTestReport {
    dependsOn test // test 종속성 추가

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    def QDomainList = []
    for (qPattern in '**/QA'..'**/QZ') { // QClass 대응
        QDomainList.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**',
                    '**/event/**',
                    '**/*InitData*',
                    '**/*Application*',
                    '**/exception/**',
                    '**/service/alarm/**',
                    '**/aop/**',
                    '**/config/**',
                    '**/MemberRole*'
            ] + QDomainList)
        }))
    }

//    finalizedBy 'jacocoTestCoverageVerification' // jacocoTestReport 태스크가 끝난 후 실행
}

// jacoco Test 유효성 확인
jacocoTestCoverageVerification {
    def QDomainList = []
    for (qPattern in '*.QA'..'*.QZ') { // QClass 대응
        QDomainList.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true // 규칙 활성화 여부
            element = 'CLASS' // 커버리지를 체크할 단위 설정

            // 코드 커버리지를 측정할 때 사용되는 지표
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.30
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.30
            }

            excludes = [
                    '**.dto.**',
                    '**.event.**',
                    '**.*InitData*',
                    '**.*Application*',
                    '**.exception.**',
                    '**.service.alarm.**',
                    '**.aop.**',
                    '**.config.**',
                    '**.MemberRole*'
            ] + QDomainList
        }
    }
}

// QueryDSL 빌드 옵션
def querydslDir = "$buildDir/generated/querydsl"
sourceSets {
    main.java.srcDirs += [querydslDir]
}

task copySecret(type: Copy) {
    from './photocard_security'
    into './src/main/resources'
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}
